import matplotlib.pyplot as plt

from io import BytesIO
from database.py_master_bot_database import PyMasterBotDatabase


def progress_testing_visual_repr_function(message, bot):
    chat_id = message.chat.id
    bot_db = PyMasterBotDatabase()

    user_testing_progress = bot_db.get_user_by_id(chat_id).progress_testing

    # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ –≥—Ä–∞—Ñ—ñ–∫—É
    colors = ['green', 'orange', 'red']

    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥—Ä–∞—Ñ—ñ–∫–∞
    x = [key for key in user_testing_progress.keys()]
    y = [len(value) for value in user_testing_progress.values()]

    plt.bar(x, y, color=colors)

    # –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –Ω–∞ –æ—Å—ñ –£ —Ç—ñ–ª—å–∫–∏ —Ü—ñ–ª–∏—Ö —á–∏—Å–µ–ª
    plt.yticks(range(0, int(max(y)) + 1))
    # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Ç–∞ –ø—ñ–¥–ø–∏—Å—ñ–≤ –æ—Å–µ–π
    plt.title('–ö—ñ–ª—å–∫—ñ—Å—Ç—å —É—Å–ø—ñ—à–Ω–æ —Å–∫–ª–∞–¥–µ–Ω–∏—Ö —Ç–µ—Å—Ç—ñ–≤ –∑–∞ —Ä—ñ–≤–Ω—è–º–∏', fontweight=True)
    plt.xlabel('–ù–∞–∑–≤–∞ —Ä—ñ–≤–Ω—è')
    plt.ylabel('–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–µ—Å—Ç—ñ–≤')

    # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≥—Ä–∞—Ñ—ñ–∫–∞ –≤ –±—É—Ñ–µ—Ä—ñ
    buffer = BytesIO()
    plt.savefig(buffer, format='png')
    buffer.seek(0)

    # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –≥—Ä–∞—Ñ—ñ–∫–∞ —è–∫ —Ñ–æ—Ç–æ —É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –∫–æ–º–∞–Ω–¥—É
    bot.send_photo(message.chat.id, photo=buffer)

    # –û—á–∏—â–µ–Ω–Ω—è –≥—Ä–∞—Ñ—ñ–∫–∞
    plt.clf()


def progress_level_visual_repr_function(message, bot):
    chat_id = message.chat.id
    bot_db = PyMasterBotDatabase()

    # –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö –∑ —Ä—ñ–≤–Ω—è–º–∏ —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ —Ç–∞ –∑–Ω–∞—á–µ–Ω–Ω—è–º–∏
    user_testing_progress = bot_db.get_user_by_id(chat_id).progress_testing

    max_value = 20

    # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ –≥—Ä–∞—Ñ—ñ–∫—É
    colors = ['green', 'orange', 'red', 'bisque']

    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—ñ–¥–≥—Ä–∞—Ñ—ñ–∫—ñ–≤
    fig, axes = plt.subplots(1, 3, figsize=(10, 4))

    # –ü–æ–±—É–¥–æ–≤–∞ –∫—Ä—É–≥–æ–≤–∏—Ö –¥—ñ–∞–≥—Ä–∞–º –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ —Ä—ñ–≤–Ω—è —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ
    for i, (level, values) in enumerate(user_testing_progress.items()):
        ax = axes[i]  # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—ñ–¥–≥—Ä–∞—Ñ—ñ–∫–∞
        completed_tasks = len(values)
        remaining_tasks = max_value - completed_tasks
        sizes = [completed_tasks, (remaining_tasks if remaining_tasks > 0 else 0)]

        explode = [0.1] + [0] * (len(sizes) - 1)  # –ü—ñ–¥—Å–≤—ñ—á—É–≤–∞–Ω–Ω—è –ø–µ—Ä—à–æ–≥–æ —Å–µ–≥–º–µ–Ω—Ç—É
        '''
        labels = [f'{level} ({completed_tasks}/{max_value})', ''] if completed_tasks < max_value else [
            f'{level} ({completed_tasks}/{max_value})', f'\n\n\n\n\n\n\n\n\n'
                                                        f'–í–∏–∫–æ–Ω–∞–Ω–æ\n–¥–æ—Å—Ç–∞—Ç–Ω—å–æ\n–∑–∞–≤–¥–∞–Ω—å\n—Ä—ñ–≤–Ω—è\n{level}']
        '''
        def form_labels():
            if completed_tasks == 0:
                return f'–ù–µ–º–∞—î\n–≤–∏–∫–æ–Ω–∞–Ω–∏—Ö\n–∑–∞–≤–¥–∞–Ω—å\n—Ä—ñ–≤–Ω—è\n{level}', ''
            elif completed_tasks < max_value:
                return f'{level} ({completed_tasks}/{max_value})', ''
            else:
                return f'{level} ({completed_tasks}/{max_value})', f'\n\n\n\n\n\n\n\n\n' \
                                                                   f'–í–∏–∫–æ–Ω–∞–Ω–æ\n–¥–æ—Å—Ç–∞—Ç–Ω—å–æ\n–∑–∞–≤–¥–∞–Ω—å\n—Ä—ñ–≤–Ω—è\n{level}'

        ax.pie(sizes, labels=form_labels(), colors=(colors[i], colors[-1]), explode=explode, autopct='%1.1f%%')
        ax.set_title(level.capitalize(), fontsize=17)
        ax.tick_params(labelsize=16)  # –†–æ–∑–º—ñ—Ä —à—Ä–∏—Ñ—Ç—É –ø—ñ–¥–ø–∏—Å—ñ–≤

    # –ó–∞–≥–∞–ª—å–Ω–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
    fig.suptitle('–ü—Ä–æ–≥—Ä–µ—Å –∑–∞ —Ä—ñ–≤–Ω—è–º–∏ —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ', fontsize=18)

    # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≥—Ä–∞—Ñ—ñ–∫–∞ –≤ –±—É—Ñ–µ—Ä—ñ
    buffer = BytesIO()
    plt.savefig(buffer, format='png')
    buffer.seek(0)

    # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –≥—Ä–∞—Ñ—ñ–∫–∞ —è–∫ —Ñ–æ—Ç–æ —É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –∫–æ–º–∞–Ω–¥—É
    bot.send_photo(message.chat.id, photo=buffer)

    # –û—á–∏—â–µ–Ω–Ω—è –≥—Ä–∞—Ñ—ñ–∫–∞
    plt.clf()


def user_visual_repr_function(message, bot):
    chat_id = message.chat.id
    bot_db = PyMasterBotDatabase()
    current_user = bot_db.get_user_by_id(chat_id)

    top_users = ""  # create a rating for display
    counter = 0

    top_users_by_score = [(user.id, user.name, user.username, user.score)
                          for user in bot_db.top_users_by_score(top_number=5)]  # number of persons in the rating
    if top_users_by_score:

        for user in top_users_by_score:
            counter += 1
            if user[0] == current_user.id:
                top_users += f"<b>{counter}. {user[1]}({user[2]}) - {user[3]} pts</b> (THIS IS YOU!)\n"
            else:
                top_users += f"{counter}. {user[1]}({user[2]}) - {user[3]} pts\n"

    user_score_position = bot_db.rank_user_score(user_id=chat_id)

    bot.send_message(chat_id, f"You have <b>{current_user.status}</b> status until "
                              f"{current_user.paid_until if current_user.paid_until else 'the moment of payment'}.\n\n"
                              f"{message.chat.first_name}, your total score is <b>{current_user.score} pts</b>.\n"
                              f"You take <b>{user_score_position} place</b> in the overall rating.\n\n"
                              f"TOP-{counter} üèÜ:\n {top_users}", parse_mode="HTML")
